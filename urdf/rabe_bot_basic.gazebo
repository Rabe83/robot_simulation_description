<?xml version="1.0"?>
<diffrobot>

    <!-- Plug in for differential_drive_controller -->
   <gazebo>
      <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">

        <!-- Plugin update rate in Hz -->
        <updateRate>50</updateRate>

        <!-- Name of left joint, defaults to `left_joint` -->
        <leftJoint>front_left_wheel_joint</leftJoint>

        <!-- Name of right joint, defaults to `right_joint` -->
        <rightJoint>front_right_wheel_joint</rightJoint>

        <!-- Name of left joint, defaults to `left_joint` -->
        <leftJoint>rear_left_wheel_joint</leftJoint>

        <!-- Name of right joint, defaults to `right_joint` -->
        <rightJoint>rear_right_wheel_joint</rightJoint>

        <!-- The distance from the center of one wheel to the other, in meters, defaults to 0.34 m -->
        <wheelSeparation>0.5</wheelSeparation>

        <!-- Diameter of the wheels, in meters, defaults to 0.15 m -->
        <wheelDiameter>0.52</wheelDiameter>

        <!-- Wheel acceleration, in rad/s^2, defaults to 0.0 rad/s^2 -->
        <wheelAcceleration>2.0</wheelAcceleration>

        <!-- Maximum torque which the wheels can produce, in Nm, defaults to 5 Nm -->
        <wheelTorque>40</wheelTorque>

        <!-- Topic to receive geometry_msgs/Twist message commands, defaults to `cmd_vel` -->
        <commandTopic>cmd_vel</commandTopic>

        <!-- Topic to publish nav_msgs/Odometry messages, defaults to `odom` -->
        <odometryTopic>odom</odometryTopic>

        <!-- Odometry frame, defaults to `odom` -->
        <odometryFrame>odom</odometryFrame>

        <!-- Robot frame to calculate odometry from, defaults to `base_footprint` -->
        <robotBaseFrame>dummy_link</robotBaseFrame>

        <!-- Odometry source, 0 for ENCODER, 1 for WORLD, defaults to WORLD -->
        <odometrySource>1</odometrySource>

        <!-- Set to true to publish transforms for the wheel links, defaults to false ((When error in rviz during publishing, we make it false instead of true)) -->
        <publishWheelTF>false</publishWheelTF>

        <!-- Set to true to publish transforms for the odometry, defaults to true -->
        <publishOdom>true</publishOdom>

        <!-- Set to true to publish sensor_msgs/JointState on /joint_states for the wheel joints, defaults to false -->
        <publishWheelJointState>true</publishWheelJointState>

        <!-- Set to true to swap right and left wheels, defaults to true -->
        <legacyMode>false</legacyMode>
      </plugin>
    </gazebo>

   <!-- RGBD Camera POINTCLOUD-->
    <gazebo reference="camera_optical_data_correction_link">
      <sensor type="depth" name="camera_optical_data_correction_link_camera">
        <always_on>1</always_on>
        <update_rate>20.0</update_rate>
        <visualize>true</visualize>             
        <camera>
            <horizontal_fov>1.047</horizontal_fov>  
            <image>
                <width>640</width>
                <height>480</height>
                <format>R8G8B8</format>
            </image>
            <depth_camera>

            </depth_camera>
            <clip>
                <near>0.1</near>
                <far>20</far>
            </clip>
        </camera>
         <plugin name="camera_optical_data_correction_link_controller" filename="libgazebo_ros_openni_kinect.so">
            <alwaysOn>true</alwaysOn>
            <updateRate>10.0</updateRate>
            <cameraName>kinect</cameraName>
            <frameName>camera_optical_data_correction_link</frameName>                   
            <imageTopicName>rgb/image_raw</imageTopicName>
            <depthImageTopicName>depth/image_raw</depthImageTopicName>
            <pointCloudTopicName>depth/points</pointCloudTopicName>
            <cameraInfoTopicName>rgb/camera_info</cameraInfoTopicName>              
            <depthImageCameraInfoTopicName>depth/camera_info</depthImageCameraInfoTopicName>            
            <pointCloudCutoff>0.4</pointCloudCutoff>                
                <hackBaseline>0.07</hackBaseline>
                <distortionK1>0.0</distortionK1>
                <distortionK2>0.0</distortionK2>
                <distortionK3>0.0</distortionK3>
                <distortionT1>0.0</distortionT1>
                <distortionT2>0.0</distortionT2>
            <CxPrime>0.0</CxPrime>
            <Cx>0.0</Cx>
            <Cy>0.0</Cy>
            <focalLength>0.0</focalLength>
            </plugin>
      </sensor>
    </gazebo>

 
    <!-- LiDAR Sensor -->
 
    <gazebo reference="lidar_optical_data_correction_link">
        <sensor type="ray" name="rplidar">
          <pose>0 0 0 0 0 0</pose>
          <visualize>false</visualize>
          <update_rate>10</update_rate>
          <ray>
            <scan>
              <horizontal>
                <samples>720</samples>
                <resolution>1</resolution>
                <min_angle>0</min_angle>
                <max_angle>6.28319</max_angle>
              </horizontal>
            </scan>
            <range>
              <min>0.15</min>
              <max>12.0</max>
              <resolution>0.01</resolution>
            </range>
            
            <noise>
              <type>gaussian</type>
              <mean>0.0</mean>
              <stddev>0.01</stddev>
            </noise>
          </ray>
          <plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_laser.so">
            <topicName>laser/scan</topicName>
            <frameName>lidar_optical_data_correction_link</frameName>
          </plugin>
        </sensor>
    </gazebo>




    <!--lidar GPU Laser-->
    <!-- <gazebo reference="LiDAR_link">
      <sensor type="gpu_ray" name="LiDAR_optical_data_correction_link_sensor">
        <pose>0 0 0 0 0 0</pose>
        <visualize>true</visualize>
        <update_rate>40</update_rate>
        <ray>
          <scan>
            <horizontal>
              <samples>720</samples>
              <resolution>1</resolution>
              <min_angle>-1.570796</min_angle>
              <max_angle>1.570796</max_angle>
            </horizontal>
          </scan>
          <range>
            <min>0.10</min>
            <max>30.0</max>
            <resolution>0.01</resolution>
          </range>
          <noise>
            <type>gaussian</type> -->
            <!-- Noise parameters based on published spec for Hokuyo laser
                achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and
                stddev of 0.01m will put 99.7% of samples within 0.03m of the true
                reading. -->
            <!-- <mean>0.0</mean>
            <stddev>0.01</stddev>
          </noise>
        </ray>
        <plugin name="LiDAR_link_controller" filename="libgazebo_ros_gpu_laser.so">
          <topicName>robot_simulation_description/laser/scan</topicName>
          <frameName>LiDAR_link</frameName>
        </plugin>
      </sensor>
    </gazebo> -->

  



  	<gazebo reference="base_link">
	  	<material>Gazebo/White</material>
	  </gazebo>

    <gazebo reference="front_right_stand_link">
	  	<material>Gazebo/Black</material>
	  </gazebo>


    <gazebo reference="front_left_stand_link">
	  	<material>Gazebo/Black</material>
	  </gazebo>


    <gazebo reference="rear_right_stand_link">
	  	<material>Gazebo/Black</material>
	  </gazebo>


    <gazebo reference="rear_left_stand_link">
	  	<material>Gazebo/Black</material>
	  </gazebo>


    <gazebo reference="top_layer_link">
	  	<material>Gazebo/Red</material>
	  </gazebo>

    <gazebo reference="front_right_wheel_link">
	  	<material>Gazebo/Black</material>
	  </gazebo>

    <gazebo reference="front_left_wheel_link">
	  	<material>Gazebo/Black</material>
	  </gazebo>
    
    <gazebo reference="rear_left_wheel_link">
	  	<material>Gazebo/Black</material>
	  </gazebo>

    <gazebo reference="rear_right_wheel_link">
	  	<material>Gazebo/Black</material>
	  </gazebo>

    <gazebo reference="camera_link">
	  	<material>Gazebo/Black</material>
	  </gazebo>

    <gazebo reference="LiDAR_link">
	  	<material>Gazebo/Black</material>
	  </gazebo>
</diffrobot>